name: 'Deploy on DEV'

on: workflow_dispatch

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: development

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Azure CLI script
      uses: azure/cli@v2
      with:
        azcliversion: latest
        inlineScript: |
          az account show

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      working-directory: ./azure
      run: |
        terraform init \
        -backend-config="resource_group_name=${{ vars.IAC_TF_STATE_RESOURCE_GROUP }}" \
        -backend-config="storage_account_name=${{ vars.IAC_TF_STATE_STRACC_NAME }}" \
        -backend-config="container_name=${{ vars.IAC_TF_STATE_CONTAINER_NAME }}" \
        -backend-config="key=${{ vars.IAC_TF_STATE_KEY_NAME }}"

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      working-directory: ./azure
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      working-directory: ./azure
      run: terraform plan -input=false
      env:
        TF_VAR_lz_connectivity_subscription_id : ${{ secrets.TF_VAR_lz_connectivity_subscription_id }}
        TF_VAR_lz_connectivity_tenant_id : ${{ secrets.TF_VAR_lz_connectivity_subscription_id }}
        TF_VAR_lz_connectivity_client_id : ${{ secrets.TF_VAR_lz_connectivity_subscription_id }}
        TF_VAR_lz_connectivity_client_secret : ${{ secrets.TF_VAR_lz_connectivity_subscription_id }}
        TF_VAR_lz_non_prod_subscription_id : ${{ secrets.TF_VAR_lz_non_prod_subscription_id }}
        TF_VAR_lz_non_prod_tenant_id : ${{ secrets.TF_VAR_lz_non_prod_subscription_id }}
        TF_VAR_lz_non_prod_client_id : ${{ secrets.TF_VAR_lz_non_prod_subscription_id }}
        TF_VAR_lz_non_prod_client_secret : ${{ secrets.TF_VAR_lz_non_prod_subscription_id }}

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false
